--‚úÖ Minimalistic Onetap-style GUI Library
--üì¶ Everything in one file, no external loading
--üñ±Ô∏è GUI is draggable, dark theme, blurred background
--üå´Ô∏è Onetap-style visual theme

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer

--üå´Ô∏è Add blur effect to background
local blur = Instance.new("BlurEffect")
blur.Size = 12
blur.Parent = game:GetService("Lighting")

--üí† GUI Main Container
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "OnetapGUI"
screenGui.ResetOnSpawn = false
screenGui.IgnoreGuiInset = true
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

--üéõÔ∏è Create main window
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 500, 0, 400)
mainFrame.Position = UDim2.new(0.3, 0, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
mainFrame.BorderSizePixel = 0
mainFrame.BackgroundTransparency = 0.05
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.ClipsDescendants = true
mainFrame.Parent = screenGui

local corner = Instance.new("UICorner", mainFrame)
corner.CornerRadius = UDim.new(0, 8)

-- üñ±Ô∏è Make draggable
local dragging, dragInput, dragStart, startPos
mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
end)\n
UIS.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

--üìÅ Tab system
local tabs = {}
local currentTab = nil
local tabButtonsFrame = Instance.new("Frame")
tabButtonsFrame.Size = UDim2.new(0, 100, 1, 0)
tabButtonsFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
tabButtonsFrame.BorderSizePixel = 0
tabButtonsFrame.Parent = mainFrame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 2)
UIListLayout.Parent = tabButtonsFrame

--üìå Tab Function
local function AddTab(tabName)
    local tabButton = Instance.new("TextButton")
    tabButton.Size = UDim2.new(1, 0, 0, 30)
    tabButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    tabButton.Text = tabName
    tabButton.Font = Enum.Font.Gotham
    tabButton.TextColor3 = Color3.fromRGB(255,255,255)
    tabButton.TextSize = 14
    tabButton.BorderSizePixel = 0
    tabButton.Parent = tabButtonsFrame

    local tabFrame = Instance.new("Frame")
    tabFrame.Size = UDim2.new(1, -100, 1, 0)
    tabFrame.Position = UDim2.new(0, 100, 0, 0)
    tabFrame.BackgroundTransparency = 1
    tabFrame.Visible = false
    tabFrame.Parent = mainFrame

    tabs[tabName] = tabFrame

    tabButton.MouseButton1Click:Connect(function()
        if currentTab then currentTab.Visible = false end
        currentTab = tabFrame
        currentTab.Visible = true
    end)

    if not currentTab then
        currentTab = tabFrame
        tabFrame.Visible = true
    end

    return tabFrame
end

--üì¶ Component: Toggle
local function AddToggle(tab, text, callback)
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 300, 0, 30)
    toggle.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggle.Text = text .. ": OFF"
    toggle.Font = Enum.Font.Gotham
    toggle.TextSize = 14
    toggle.BorderSizePixel = 0
    toggle.Parent = tab

    local toggled = false
    toggle.MouseButton1Click:Connect(function()
        toggled = not toggled
        toggle.Text = text .. (toggled and ": ON" or ": OFF")
        if callback then callback(toggled) end
    end)
end

--üì¶ Component: Button
local function AddButton(tab, text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 300, 0, 30)
    button.BackgroundColor3 = Color3.fromRGB(45, 45, 50)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Text = text
    button.Font = Enum.Font.Gotham
    button.TextSize = 14
    button.BorderSizePixel = 0
    button.Parent = tab

    button.MouseButton1Click:Connect(function()
        if callback then callback() end
    end)
end

--üì¶ Component: Slider
local function AddSlider(tab, text, min, max, default, callback)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 300, 0, 20)
    label.BackgroundTransparency = 1
    label.Text = text .. ": " .. default
    label.TextColor3 = Color3.fromRGB(255,255,255)
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = tab

    local slider = Instance.new("TextButton")
    slider.Size = UDim2.new(0, 300, 0, 10)
    slider.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    slider.BorderSizePixel = 0
    slider.Text = ""
    slider.Parent = tab

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default - min)/(max - min), 0, 1, 0)
    fill.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
    fill.BorderSizePixel = 0
    fill.Parent = slider

    local dragging = false
    slider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = true end
    end)
    slider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
    end)
    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local rel = input.Position.X - slider.AbsolutePosition.X
            local percent = math.clamp(rel / slider.AbsoluteSize.X, 0, 1)
            fill.Size = UDim2.new(percent, 0, 1, 0)
            local value = math.floor(min + (max - min) * percent)
            label.Text = text .. ": " .. tostring(value)
            if callback then callback(value) end
        end
    end)
end

--üîß Return interface
return {
    AddTab = AddTab,
    AddToggle = AddToggle,
    AddButton = AddButton,
    AddSlider = AddSlider,
    MainFrame = mainFrame
}

local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer

local SaveFolder = "Memesenserbx/"
if not isfolder(SaveFolder) then
    makefolder(SaveFolder)
end

local GuiLibrary = {}
GuiLibrary.Tabs = {}
GuiLibrary.Configs = {}

-- Utility
local function create(obj, props)
	local inst = Instance.new(obj)
	for i, v in pairs(props) do
		inst[i] = v
	end
	return inst
end

-- Theme
local theme = {
	Background = Color3.fromRGB(25, 25, 25),
	Frame = Color3.fromRGB(30, 30, 30),
	Button = Color3.fromRGB(40, 40, 40),
	Text = Color3.fromRGB(255, 255, 255)
}

-- GUI
local MainGui = create("ScreenGui", {
	Name = "MyGuiLibrary",
	Parent = CoreGui,
	ResetOnSpawn = false,
})

local MainFrame = create("Frame", {
	Name = "MainFrame",
	Size = UDim2.new(0, 600, 0, 400),
	Position = UDim2.new(0.5, -300, 0.5, -200),
	BackgroundColor3 = theme.Background,
	BorderSizePixel = 0,
	Draggable = true,
	Active = true,
	Parent = MainGui
})

local TabHolder = create("Frame", {
	Name = "TabHolder",
	Size = UDim2.new(0, 120, 1, 0),
	BackgroundColor3 = theme.Frame,
	BorderSizePixel = 0,
	Parent = MainFrame
})

local Pages = create("Frame", {
	Name = "Pages",
	Size = UDim2.new(1, -120, 1, 0),
	Position = UDim2.new(0, 120, 0, 0),
	BackgroundTransparency = 1,
	Parent = MainFrame
})

-- AddTab
function GuiLibrary:AddTab(tabData)
	local tab = {}
	tab.Name = tabData.Name or "New Tab"
	tab.Type = tabData.Тип or 0

	local Button = create("TextButton", {
		Text = tab.Name,
		Size = UDim2.new(1, 0, 0, 30),
		BackgroundColor3 = theme.Button,
		BorderSizePixel = 0,
		TextColor3 = theme.Text,
		Font = Enum.Font.SourceSans,
		TextSize = 16,
		Parent = TabHolder
	})

	local Page = create("ScrollingFrame", {
		Size = UDim2.new(1, 0, 1, 0),
		CanvasSize = UDim2.new(0, 0, 0, 0),
		ScrollBarThickness = 4,
		BackgroundTransparency = 1,
		Visible = false,
		Parent = Pages
	})

	Button.MouseButton1Click:Connect(function()
		for _, p in pairs(Pages:GetChildren()) do
			p.Visible = false
		end
		Page.Visible = true
	end)

	table.insert(GuiLibrary.Tabs, {Tab = tab, Button = Button, Page = Page})

	if tab.Type == 11 then
		GuiLibrary:InitConfigPage(Page)
	end

	return {
		Page = Page,
		Button = Button
	}
end

-- AddCheckbox
function GuiLibrary:AddCheckbox(tabPage, name, default, callback)
	local box = create("TextButton", {
		Text = "[ ] " .. name,
		Size = UDim2.new(1, -10, 0, 25),
		BackgroundColor3 = theme.Button,
		BorderSizePixel = 0,
		TextColor3 = theme.Text,
		Font = Enum.Font.SourceSans,
		TextSize = 16,
		Parent = tabPage
	})

	local state = default or false
	local function updateText()
		box.Text = (state and "[✓] " or "[ ] ") .. name
	end
	updateText()

	box.MouseButton1Click:Connect(function()
		state = not state
		updateText()
		if callback then callback(state) end
	end)
end

-- AddDropdown
function GuiLibrary:AddDropdown(tabPage, name, items, callback)
	local holder = create("Frame", {
		Size = UDim2.new(1, -10, 0, 25 + #items * 20),
		BackgroundColor3 = theme.Button,
		BorderSizePixel = 0,
		Parent = tabPage
	})

	local label = create("TextLabel", {
		Text = name,
		Size = UDim2.new(1, 0, 0, 25),
		BackgroundTransparency = 1,
		TextColor3 = theme.Text,
		Font = Enum.Font.SourceSans,
		TextSize = 16,
		Parent = holder
	})

	for i, v in ipairs(items) do
		local item = create("TextButton", {
			Text = v,
			Size = UDim2.new(1, 0, 0, 20),
			Position = UDim2.new(0, 0, 0, 25 + (i - 1) * 20),
			BackgroundTransparency = 1,
			TextColor3 = theme.Text,
			Font = Enum.Font.SourceSans,
			TextSize = 14,
			Parent = holder
		})
		item.MouseButton1Click:Connect(function()
			if callback then callback(v) end
		end)
	end
end

-- AddSlider
function GuiLibrary:AddSlider(tabPage, name, min, max, default, callback)
	local label = create("TextLabel", {
		Text = name .. ": " .. default,
		Size = UDim2.new(1, -10, 0, 20),
		BackgroundTransparency = 1,
		TextColor3 = theme.Text,
		Font = Enum.Font.SourceSans,
		TextSize = 14,
		Parent = tabPage
	})

	local slider = create("TextButton", {
		Text = "",
		Size = UDim2.new(1, -10, 0, 10),
		BackgroundColor3 = theme.Button,
		BorderSizePixel = 0,
		Parent = tabPage
	})

	local dragging = false
	local value = default

	slider.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local percent = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
			value = math.floor(min + (max - min) * percent)
			label.Text = name .. ": " .. tostring(value)
			if callback then callback(value) end
		end
	end)
end

-- Config Page
function GuiLibrary:InitConfigPage(tabPage)
	local configList = create("ScrollingFrame", {
		Size = UDim2.new(0, 180, 1, -40),
		Position = UDim2.new(0, 0, 0, 0),
		CanvasSize = UDim2.new(0, 0, 0, 0),
		ScrollBarThickness = 4,
		BackgroundColor3 = Color3.fromRGB(20, 20, 20),
		Parent = tabPage
	})

	local function refreshConfigs()
		configList:ClearAllChildren()
		local files = listfiles(SaveFolder)
		for _, file in pairs(files) do
			local filename = file:match(SaveFolder .. "(.*).json")
			if filename then
				local btn = create("TextButton", {
					Text = filename,
					Size = UDim2.new(1, 0, 0, 25),
					BackgroundColor3 = theme.Button,
					TextColor3 = theme.Text,
					Font = Enum.Font.SourceSans,
					TextSize = 14,
					Parent = configList
				})
				btn.MouseButton1Click:Connect(function()
					GuiLibrary.CurrentConfig = filename
				end)
			end
		end
	end
	refreshConfigs()

	local actions = {
		{ "Create", function()
			local name = tostring(math.random(10000, 99999))
			writefile(SaveFolder .. name .. ".json", "{}")
			refreshConfigs()
		end },
		{ "Save", function()
			if GuiLibrary.CurrentConfig then
				writefile(SaveFolder .. GuiLibrary.CurrentConfig .. ".json", HttpService:JSONEncode(GuiLibrary.Configs))
			end
		end },
		{ "Load", function()
			if GuiLibrary.CurrentConfig and isfile(SaveFolder .. GuiLibrary.CurrentConfig .. ".json") then
				local data = readfile(SaveFolder .. GuiLibrary.CurrentConfig .. ".json")
				GuiLibrary.Configs = HttpService:JSONDecode(data)
			end
		end },
		{ "Delete", function()
			if GuiLibrary.CurrentConfig and isfile(SaveFolder .. GuiLibrary.CurrentConfig .. ".json") then
				delfile(SaveFolder .. GuiLibrary.CurrentConfig .. ".json")
				GuiLibrary.CurrentConfig = nil
				refreshConfigs()
			end
		end }
	}

	for i, act in ipairs(actions) do
		create("TextButton", {
			Text = act[1],
			Size = UDim2.new(0, 100, 0, 25),
			Position = UDim2.new(0, 200, 0, (i - 1) * 30),
			BackgroundColor3 = theme.Button,
			TextColor3 = theme.Text,
			Font = Enum.Font.SourceSans,
			TextSize = 14,
			Parent = tabPage
	 }).MouseButton1Click:Connect(act[2])
	end
end

return GuiLibrary
